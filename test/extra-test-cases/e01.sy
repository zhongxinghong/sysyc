// test evaluator

int e01_abs(int x)
{
  if (x < 0)
    return -x;
  return x;
}

const int A[2][4][3][2] = {
  0x1,  2,  {3,  4},  5,  6,
  7,  8,  9,  10, {11},
  {13, 14, 15, 0x10},
  19, 20, 21, 22, {23, 24},
  {{},
  7,  8,  {9,  01 + 011}, 11, 12,
  {13, 14, {15}, {0x0011}},
  19, 20, {}, 23, 00030}
};

// [0][0]  1  2  3  4  5  6
// [0][1]  7  8  9 10 11  0
// [0][2] 13 14 15 16  0  0
// [0][3] 19 20 21 22 23 24
// [1][0]  0  0  0  0  0  0
// [1][1]  7  8  9 10 11 12
// [1][2] 13 14 15  0 17  0
// [1][3] 19 20  0  0 23 24

const int x = 5 % 3, C[9/4] = {2 * 6 / 4, 2 + 6 % 4}, y = 5;  // 2, {3, 4}, 5
const int z = 36 / (x + x * C[1] / 2);

int main()
{
  int B[8] = {
    A[0][0][0][0],  // 1
    A[0][1][2][1],  // 0
    A[0][2][1][1],  // 16
    A[0][2][2][0],  // 0
    A[1][1][1][1],  // 10
    A[1][2][2][0],  // 17
    A[1][3][1][1],  // 0
    A[1][3][2][1]   // 24
  };

  int a0 = B[2/3];
  int a1 = B[9-14+6];
  int a2 = B[7*8-54];
  int a3 = B[8%5];
  int a4 = B[19/2/2];
  int a5 = B[1+1+1+1+1];
  int a6 = B[-(-3+-3)];
  int a7 = B[-3*(2-1)- -10];
  int b0 = e01_abs(a0 - 1);
  int b1 = e01_abs(a1 - 0);
  int b2 = e01_abs(a2 - 16);
  int b3 = e01_abs(a3 - 0);
  int b4 = e01_abs(a4 - 10);
  int b5 = e01_abs(a5 - 17);
  int b6 = e01_abs(a6 - 0);
  int b7 = e01_abs(a7 - 24);

  int c0 = 0, c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0;

  if (2 + 5 - 4 + A[0][2][1][1] != 19)
    c0 = 1;

  if (100 * 4 / A[1][1][1][1] != 40)
    c1 = 1;

  if (A[1][2][2][0] % 4 - 1 > 0 || A[1][2][2][0] % 4 - 1 < 0)
    c2 = 1;

  if (A[0][0][0][0] == 1 && A[0][1][2][1] == 1 ||
      A[0][0][0][0] == 0 && A[0][1][2][1] == 0 ||
      !!!-!-((A[1][3][2][1] + 24 / 2) - 36))
    c3 = 1;

  if (!A[0][0][0][0])
    c4 = 1;

  if (!!A[0][1][2][1])
    c5 = 1;

  if (!A[1][1][1][1])
    c6 = 1;

  int d0 = e01_abs(x - 2);
  int d1 = e01_abs(C[0] - 3);
  int d2 = e01_abs(C[1] - 4);
  int d3 = e01_abs(y - 5);
  int d4 = e01_abs(z - 6);

  return b0 + b1 + b2 + b3 + b4 + b5 + b6 + b7 +
         c0 + c1 + c2 + c3 + c4 + c5 + c6 +
         d0 + d1 + d2 + d3 + d4;
}